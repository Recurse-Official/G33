from kyber_py.kyber import Kyber512
from dilithium_py.dilithium import Dilithium2


# Helper functions for communication
def person_a_send_key():
    # Generate Kyber keypair
    pk_a, sk_a = Kyber512.keygen()

    # Generate Dilithium keypair
    pk_a_sig, sk_a_sig = Dilithium2.keygen()

    return pk_a, sk_a, pk_a_sig, sk_a_sig


def person_b_send_key():
    # Generate Kyber keypair
    pk_b, sk_b = Kyber512.keygen()

    # Generate Dilithium keypair
    pk_b_sig, sk_b_sig = Dilithium2.keygen()

    return pk_b, sk_b, pk_b_sig, sk_b_sig


def generate_shared_key(pk_a, pk_b, sk_a, sk_b):
    # A generates shared key and challenge using B's public key
    key_a, c_a = Kyber512.encaps(pk_b)

    # B decapsulates the key sent by A
    key_b = Kyber512.decaps(sk_b, c_a)

    print("Key A (Generated by A):", key_a)
    print("Key B (Decapsulated by B):", key_b)

    # Check if the keys match
    assert key_a == key_b, "Keys do not match!"

    return key_a


def sign_message(msg, sk_sig):
    sig = Dilithium2.sign(sk_sig, msg.encode('utf-8'))
    return sig


def verify_signature(msg, sig, pk_sig):
    return Dilithium2.verify(pk_sig, msg.encode('utf-8'), sig)


# Main logic
def main():
    # Generate keypairs for both parties
    pk_a, sk_a, pk_a_sig, sk_a_sig = person_a_send_key()
    pk_b, sk_b, pk_b_sig, sk_b_sig = person_b_send_key()

    # Generate and verify shared key
    shared_key = generate_shared_key(pk_a, pk_b, sk_a, sk_b)
    print("Shared key:", shared_key)

    # Person A sends a signed message to Person B
    message_a = "Hello, Person B."
    signature_a = sign_message(message_a, sk_a_sig)
    print("Person A's signature:", signature_a)

    is_valid_a = verify_signature(message_a, signature_a, pk_a_sig)
    print("Person B verifies signature from Person A:", is_valid_a)

    # Person B sends a signed message to Person A
    message_b = "Hello, Person A."
    signature_b = sign_message(message_b, sk_b_sig)
    print("Person B's signature:", signature_b)

    is_valid_b = verify_signature(message_b, signature_b, pk_b_sig)
    print("Person A verifies signature from Person B:", is_valid_b)


if __name__ == "__main__":
    main()